import org.gradle.plugins.signing.Sign
import javax.swing.*

plugins {
    id 'idea'
    id 'maven-publish'
    id "com.github.ethankhall.semantic-versioning" version "1.1.0"
    id "com.github.hierynomus.license" version "0.12.1"
    id "com.jfrog.bintray" version "1.7.2"
    id "net.saliman.properties" version "1.4.6"
}

project.version.with {
    major = textIoClearTestVersionMajor as int
    minor= textIoClearTestVersionMinor as int
    patch = textIoClearTestVersionPatch as int
    if (project.hasProperty('textIoClearTestVersionLabel')) {
        preRelease = textIoClearTestVersionLabel
    }
    releaseBuild = Boolean.valueOf(textIoClearTestReleaseBuild)
}
ext.textIoClearTestVersion = project.version as String
ext.textIoClearTestTag = Boolean.valueOf(textIoClearTestReleaseBuild) ? "v$ext.textIoClearTestVersion" : 'master'

def pomConfig = {
    url "https://github.com/to-be-deleted/text-io-clear-test"
    developers {
        developer {
            id "siordache"
            name "Serban Iordache"
        }
    }
    scm {
        connection "https://github.com/to-be-deleted/text-io-clear-test.git"
        developerConnection "https://github.com/to-be-deleted/text-io-clear-test.git"
        url "https://github.com/to-be-deleted/text-io-clear-test"
    }
}

apply plugin: 'signing'
repositories {
  jcenter()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'com.github.hierynomus.license'

sourceCompatibility = 1.8
group = 'org.beryx.textio.clear'
version = textIoClearTestVersion

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

license {
    header rootProject.file("license-header.txt")
    skipExistingHeaders true
    ignoreFailures false
}

signing {
    sign configurations.archives
}

signArchives {
  onlyIf { gradle.taskGraph.allTasks.findAll {task -> isPublishTask(task)} }
}

dependencies {
  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
  runtime ('ch.qos.logback:logback-classic:1.1.7')
  testCompile 'junit:junit:4.12'
  testCompile('ch.qos.logback:logback-classic:1.1.7')
}

jar {
    manifest {
        attributes 'Implementation-Title': "text-io-clear-test",
                'Main-Class': 'org.beryx.textio.clear.ClearTest',
                'Implementation-Version': textIoClearTestVersion
    }
}
mainClassName = 'org.beryx.textio.clear.ClearTest'

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: classes) {
    classifier "javadoc"
    from javadoc
}

artifacts {
    archives(sourcesJar, javadocJar)
}

publishing {
    publications {
        "text-io-clear-test"(MavenPublication) {
            from components.java
            artifact sourcesJar { classifier "sources" }
            artifact javadocJar { classifier "javadoc" }
            groupId 'org.beryx.textio.clear'
            artifactId project.name
            version textIoClearTestVersion
            pom.withXml {
                def root = asNode()
                root.appendNode('name', "Module $project.name")
                root.appendNode('description', "The $project.name artifact")
                root.children().last() + pomConfig

                // We cannot configure the licenses in pomConfig due to a name conflict with the 'license' extension defined by the com.github.hierynomus.license plugin
                def licenseNode = root.appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'The Apache Software License, Version 2.0')
                licenseNode.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                licenseNode.appendNode('distribution', 'repo')
            }
        }
    }
}

def readPasswordFromConsole(title, prompt) {
    JPanel panel = new JPanel()
    JLabel label = new JLabel(prompt)
    JPasswordField pass = new JPasswordField(24)
    panel.add(label)
    panel.add(pass)
    def options = ["OK", "Cancel"] as Object[]
    int option = JOptionPane.showOptionDialog(null, panel, title,
            JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, null)
    if(option != 0) throw new InvalidUserDataException("Operation cancelled by the user.")
    new String(pass.password)
}

def isPublishTask(task) {
  task.name.startsWith('publish')
}

gradle.taskGraph.whenReady { taskGraph ->
    if (gradle.taskGraph.allTasks.findAll {task -> isPublishTask(task)}) {
        def password = readPasswordFromConsole('Please enter your signing credentials', 'PGP Private Key Password')
        allprojects { ext."signing.keyId" = signingKeyId }
        allprojects { ext."signing.secretKeyRingFile" = signingSecretKeyRingFile }
        allprojects { ext."signing.password" = password }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : "unknownUser"
    key =  project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : "unknownKey"
    publications = ['text-io-clear-test']
    pkg {
        repo = 'maven'
        name = 'text-io-clear-test'
        userOrg = 'to-be-deleted'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/to-be-deleted/text-io-clear-test.git'

        version {
                name = textIoClearTestVersion
                desc = "TextIO Clear Test $textIoClearTestVersion"
                released  = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZZ")
                vcsTag = textIoClearTestVersion
                gpg {
                    sign = true
                }
        }
    }
}
